let createTask,transitionTo,invalidProjectToken,authenticated,authenticating,initial;_2d5‍.x([["setAuthorizationToken",()=>setAuthorizationToken],["default",()=>_2d5‍.o]]);_2d5‍.w("../lib/tasks",[["createTask",["createTask"],function(v){createTask=v}],["transitionTo",["transitionTo"],function(v){transitionTo=v}]]);_2d5‍.w("../ui/messages/errors/invalidProjectToken",[["default",["invalidProjectToken"],function(v){invalidProjectToken=v}]]);_2d5‍.w("../ui/tasks/auth",[["authenticated",["authenticated"],function(v){authenticated=v}],["authenticating",["authenticating"],function(v){authenticating=v}],["initial",["initial"],function(v){initial=v}]]);



const TesterCreateAppTokenMutation = `
  mutation TesterCreateAppTokenMutation($projectToken: String!) {
    createAppToken(code: $projectToken)
  }
`;

       const setAuthorizationToken = async ctx => {
  const { client, options } = ctx;
  const variables = { projectToken: options.projectToken };

  try {
    const { createAppToken } = await client.runQuery(TesterCreateAppTokenMutation, variables);
    client.setAuthorization(createAppToken);
  } catch (errors) {
    if (errors[0] && errors[0].message && errors[0].message.match('No app with code')) {
      throw new Error(invalidProjectToken(variables));
    }
    throw errors;
  }
};

_2d5‍.d(createTask({
  title: initial.title,
  steps: [transitionTo(authenticating), setAuthorizationToken, transitionTo(authenticated, true)],
}));
