{"ast":null,"code":"var _jsxFileName = \"/Users/cchinn1/Websites/Tutorials/Storybook-Tutorial/taskbox/src/components/TaskList.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Task from './Task';\nimport { connect } from 'react-redux';\nimport { archiveTask, pinTask } from '../lib/redux';\nexport function PureTaskList({\n  loading,\n  tasks,\n  onPinTask,\n  onArchiveTask\n}) {\n  function TaskList({\n    loading,\n    tasks,\n    onPinTask,\n    onArchiveTask\n  }) {\n    const events = {\n      onPinTask,\n      onArchiveTask\n    };\n    const LoadingRow = /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loading-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"glow-checkbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"glow-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }\n    }, \"Loading\"), \" \", /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 32\n      }\n    }, \"cool\"), \" \", /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 50\n      }\n    }, \"state\")));\n\n    if (loading) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"list-items\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 9\n        }\n      }, LoadingRow, LoadingRow, LoadingRow, LoadingRow, LoadingRow, LoadingRow);\n    }\n\n    if (tasks.length === 0) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"list-items\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"wrapper-message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"icon-check\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"title-message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }\n      }, \"You have no tasks\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"subtitle-message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }\n      }, \"Sit back and relax\")));\n    }\n\n    const tasksInOrder = [...tasks.filter(t => t.state === 'TASK_PINNED'), ...tasks.filter(t => t.state !== 'TASK_PINNED')];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"list-items\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    }, tasksInOrder.map(task => /*#__PURE__*/React.createElement(Task, Object.assign({\n      key: task.id,\n      task: task\n    }, events, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    }))));\n  }\n}\nPureTaskList.propTypes = {\n  loading: PropTypes.bool,\n  tasks: PropTypes.arrayOf(Task.propTypes.task).isRequired,\n  onPinTask: PropTypes.func.isRequired,\n  onArchiveTask: PropTypes.func.isRequired\n};\nPureTaskList.defaultProps = {\n  loading: false\n};\nexport default connect(({\n  tasks\n}) => ({\n  tasks: tasks.filter(t => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED')\n}), dispatch => ({\n  onArchiveTask: id => dispatch(archiveTask(id)),\n  onPinTask: id => dispatch(pinTask(id))\n}))(PureTaskList);","map":{"version":3,"sources":["/Users/cchinn1/Websites/Tutorials/Storybook-Tutorial/taskbox/src/components/TaskList.js"],"names":["React","PropTypes","Task","connect","archiveTask","pinTask","PureTaskList","loading","tasks","onPinTask","onArchiveTask","TaskList","events","LoadingRow","length","tasksInOrder","filter","t","state","map","task","id","propTypes","bool","arrayOf","isRequired","func","defaultProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Task from './Task';\nimport { connect } from 'react-redux';\nimport { archiveTask, pinTask } from '../lib/redux';\n\nexport function PureTaskList({ loading, tasks, onPinTask, onArchiveTask }) {\n\n  function TaskList({ loading, tasks, onPinTask, onArchiveTask }) {\n    const events = {\n      onPinTask,\n      onArchiveTask,\n    };\n\n    const LoadingRow = (\n      <div className=\"loading-item\">\n        <span className=\"glow-checkbox\" />\n        <span className=\"glow-text\">\n          <span>Loading</span> <span>cool</span> <span>state</span>\n        </span>\n      </div>\n    );\n\n    if (loading) {\n      return (\n        <div className=\"list-items\">\n          {LoadingRow}\n          {LoadingRow}\n          {LoadingRow}\n          {LoadingRow}\n          {LoadingRow}\n          {LoadingRow}\n        </div>\n      );\n    }\n\n    if (tasks.length === 0) {\n      return (\n        <div className=\"list-items\">\n          <div className=\"wrapper-message\">\n            <span className=\"icon-check\" />\n            <div className=\"title-message\">You have no tasks</div>\n            <div className=\"subtitle-message\">Sit back and relax</div>\n          </div>\n        </div>\n      );\n    }\n\n    const tasksInOrder = [\n      ...tasks.filter(t => t.state === 'TASK_PINNED'),\n      ...tasks.filter(t => t.state !== 'TASK_PINNED'),\n    ];\n\n    return (\n      <div className=\"list-items\">\n        {tasksInOrder.map(task => (\n          <Task key={task.id} task={task} {...events} />\n        ))}\n      </div>\n    );\n  }\n}\n\nPureTaskList.propTypes = {\n  loading: PropTypes.bool,\n  tasks: PropTypes.arrayOf(Task.propTypes.task).isRequired,\n  onPinTask: PropTypes.func.isRequired,\n  onArchiveTask: PropTypes.func.isRequired,\n};\n\nPureTaskList.defaultProps = {\n  loading: false,\n};\n\nexport default connect(\n  ({ tasks }) => ({\n    tasks: tasks.filter(t => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED'),\n  }),\n  dispatch => ({\n    onArchiveTask: id => dispatch(archiveTask(id)),\n    onPinTask: id => dispatch(pinTask(id)),\n  })\n)(PureTaskList);"]},"metadata":{},"sourceType":"module"}