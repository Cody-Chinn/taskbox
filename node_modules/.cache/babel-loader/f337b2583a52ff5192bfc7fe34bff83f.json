{"ast":null,"code":"import _objectSpread from\"/Users/cchinn1/Websites/Tutorials/Storybook-Tutorial/taskbox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";// A simple redux store/actions/reducer implementation.\n// A true app would be more complex and separated into different files.\nimport{createStore}from'redux';// The actions are the \"names\" of the changes that can happen to the store\nexport var actions={ARCHIVE_TASK:'ARCHIVE_TASK',PIN_TASK:'PIN_TASK'};// The action creators bundle actions with the data required to execute them\nexport var archiveTask=function archiveTask(id){return{type:actions.ARCHIVE_TASK,id:id};};export var pinTask=function pinTask(id){return{type:actions.PIN_TASK,id:id};};// All our reducers simply change the state of a single task.\nfunction taskStateReducer(taskState){return function(state,action){return _objectSpread(_objectSpread({},state),{},{tasks:state.tasks.map(function(task){return task.id===action.id?_objectSpread(_objectSpread({},task),{},{state:taskState}):task;})});};}// The reducer describes how the contents of the store change for each action\nexport var reducer=function reducer(state,action){switch(action.type){case actions.ARCHIVE_TASK:return taskStateReducer('TASK_ARCHIVED')(state,action);case actions.PIN_TASK:return taskStateReducer('TASK_PINNED')(state,action);default:return state;}};// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nvar defaultTasks=[{id:'1',title:'Something',state:'TASK_INBOX'},{id:'2',title:'Something more',state:'TASK_INBOX'},{id:'3',title:'Something else',state:'TASK_INBOX'},{id:'4',title:'Something again',state:'TASK_INBOX'}];// We export the constructed redux store\nexport default createStore(reducer,{tasks:defaultTasks});","map":{"version":3,"sources":["/Users/cchinn1/Websites/Tutorials/Storybook-Tutorial/taskbox/src/lib/redux.js"],"names":["createStore","actions","ARCHIVE_TASK","PIN_TASK","archiveTask","id","type","pinTask","taskStateReducer","taskState","state","action","tasks","map","task","reducer","defaultTasks","title"],"mappings":"kLAAA;AACA;AACA,OAASA,WAAT,KAA4B,OAA5B,CAEA;AACA,MAAO,IAAMC,CAAAA,OAAO,CAAG,CACrBC,YAAY,CAAE,cADO,CAErBC,QAAQ,CAAE,UAFW,CAAhB,CAKP;AACA,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAAC,EAAE,QAAK,CAAEC,IAAI,CAAEL,OAAO,CAACC,YAAhB,CAA8BG,EAAE,CAAFA,EAA9B,CAAL,EAAtB,CACP,MAAO,IAAME,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAAAF,EAAE,QAAK,CAAEC,IAAI,CAAEL,OAAO,CAACE,QAAhB,CAA0BE,EAAE,CAAFA,EAA1B,CAAL,EAAlB,CAEP;AACA,QAASG,CAAAA,gBAAT,CAA0BC,SAA1B,CAAqC,CACnC,MAAO,UAACC,KAAD,CAAQC,MAAR,CAAmB,CACxB,sCACKD,KADL,MAEEE,KAAK,CAAEF,KAAK,CAACE,KAAN,CAAYC,GAAZ,CAAgB,SAAAC,IAAI,QACzBA,CAAAA,IAAI,CAACT,EAAL,GAAYM,MAAM,CAACN,EAAnB,gCAA6BS,IAA7B,MAAmCJ,KAAK,CAAED,SAA1C,GAAwDK,IAD/B,EAApB,CAFT,GAMD,CAPD,CAQD,CAED;AACA,MAAO,IAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACL,KAAD,CAAQC,MAAR,CAAmB,CACxC,OAAQA,MAAM,CAACL,IAAf,EACE,IAAKL,CAAAA,OAAO,CAACC,YAAb,CACE,MAAOM,CAAAA,gBAAgB,CAAC,eAAD,CAAhB,CAAkCE,KAAlC,CAAyCC,MAAzC,CAAP,CACF,IAAKV,CAAAA,OAAO,CAACE,QAAb,CACE,MAAOK,CAAAA,gBAAgB,CAAC,aAAD,CAAhB,CAAgCE,KAAhC,CAAuCC,MAAvC,CAAP,CACF,QACE,MAAOD,CAAAA,KAAP,CANJ,CAQD,CATM,CAWP;AACA;AACA,GAAMM,CAAAA,YAAY,CAAG,CACnB,CAAEX,EAAE,CAAE,GAAN,CAAWY,KAAK,CAAE,WAAlB,CAA+BP,KAAK,CAAE,YAAtC,CADmB,CAEnB,CAAEL,EAAE,CAAE,GAAN,CAAWY,KAAK,CAAE,gBAAlB,CAAoCP,KAAK,CAAE,YAA3C,CAFmB,CAGnB,CAAEL,EAAE,CAAE,GAAN,CAAWY,KAAK,CAAE,gBAAlB,CAAoCP,KAAK,CAAE,YAA3C,CAHmB,CAInB,CAAEL,EAAE,CAAE,GAAN,CAAWY,KAAK,CAAE,iBAAlB,CAAqCP,KAAK,CAAE,YAA5C,CAJmB,CAArB,CAOA;AACA,cAAeV,CAAAA,WAAW,CAACe,OAAD,CAAU,CAAEH,KAAK,CAAEI,YAAT,CAAV,CAA1B","sourcesContent":["// A simple redux store/actions/reducer implementation.\n// A true app would be more complex and separated into different files.\nimport { createStore } from 'redux';\n\n// The actions are the \"names\" of the changes that can happen to the store\nexport const actions = {\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n};\n\n// The action creators bundle actions with the data required to execute them\nexport const archiveTask = id => ({ type: actions.ARCHIVE_TASK, id });\nexport const pinTask = id => ({ type: actions.PIN_TASK, id });\n\n// All our reducers simply change the state of a single task.\nfunction taskStateReducer(taskState) {\n  return (state, action) => {\n    return {\n      ...state,\n      tasks: state.tasks.map(task =>\n        task.id === action.id ? { ...task, state: taskState } : task\n      ),\n    };\n  };\n}\n\n// The reducer describes how the contents of the store change for each action\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case actions.ARCHIVE_TASK:\n      return taskStateReducer('TASK_ARCHIVED')(state, action);\n    case actions.PIN_TASK:\n      return taskStateReducer('TASK_PINNED')(state, action);\n    default:\n      return state;\n  }\n};\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = [\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n];\n\n// We export the constructed redux store\nexport default createStore(reducer, { tasks: defaultTasks });"]},"metadata":{},"sourceType":"module"}