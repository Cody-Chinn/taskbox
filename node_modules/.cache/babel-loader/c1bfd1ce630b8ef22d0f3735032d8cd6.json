{"ast":null,"code":"var _jsxFileName = \"/Users/cchinn1/Websites/Tutorials/Storybook-Tutorial/taskbox/src/components/TaskList.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Task from './Task';\n\nfunction TaskList({\n  loading,\n  tasks,\n  onPinTask,\n  onArchiveTask\n}) {\n  const events = {\n    onPinTask,\n    onArchiveTask\n  };\n  const LoadingRow = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"loading-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"glow-checkbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"glow-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, \"Loading\"), \" \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 30\n    }\n  }, \"cool\"), \" \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 48\n    }\n  }, \"state\")));\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"list-items\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }\n    }, LoadingRow, LoadingRow, LoadingRow, LoadingRow, LoadingRow, LoadingRow);\n  }\n\n  if (tasks.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"list-items\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"wrapper-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"icon-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"title-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }\n    }, \"You have no tasks\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"subtitle-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }\n    }, \"Sit back and relax\")));\n  }\n\n  const tasksInOrder = [...tasks.filter(t => t.state === 'TASK_PINNED'), ...tasks.filter(t => t.state !== 'TASK_PINNED')];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"list-items\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, tasksInOrder.map(task => /*#__PURE__*/React.createElement(Task, Object.assign({\n    key: task.id,\n    task: task\n  }, events, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }))));\n}\n\nTaskList.propTypes = {\n  loading: PropTypes.bool,\n  tasks: PropTypes.arrayOf(Task.propTypes.task).isRequired,\n  onPinTask: PropTypes.func.isRequired,\n  onArchiveTask: PropTypes.func.isRequired\n};\nTaskList.defaultProps = {\n  loading: false\n};\nTaskList.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"TaskList\",\n  \"props\": {\n    \"loading\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"tasks\": {\n      \"type\": {\n        \"name\": \"arrayOf\",\n        \"value\": {\n          \"name\": \"custom\",\n          \"raw\": \"Task.propTypes.task\"\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"onPinTask\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"onArchiveTask\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\nexport default TaskList;\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/TaskList.js\"] = {\n    name: \"TaskList\",\n    docgenInfo: TaskList.__docgenInfo,\n    path: \"src/components/TaskList.js\"\n  };\n}","map":{"version":3,"sources":["/Users/cchinn1/Websites/Tutorials/Storybook-Tutorial/taskbox/src/components/TaskList.js"],"names":["React","PropTypes","Task","TaskList","loading","tasks","onPinTask","onArchiveTask","events","LoadingRow","length","tasksInOrder","filter","t","state","map","task","id","propTypes","bool","arrayOf","isRequired","func","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Task from './Task';\n\nfunction TaskList({ loading, tasks, onPinTask, onArchiveTask }) {\n  const events = {\n    onPinTask,\n    onArchiveTask,\n  };\n\n  const LoadingRow = (\n    <div className=\"loading-item\">\n      <span className=\"glow-checkbox\" />\n      <span className=\"glow-text\">\n        <span>Loading</span> <span>cool</span> <span>state</span>\n      </span>\n    </div>\n  );\n\n  if (loading) {\n    return (\n      <div className=\"list-items\">\n        {LoadingRow}\n        {LoadingRow}\n        {LoadingRow}\n        {LoadingRow}\n        {LoadingRow}\n        {LoadingRow}\n      </div>\n    );\n  }\n\n  if (tasks.length === 0) {\n    return (\n      <div className=\"list-items\">\n        <div className=\"wrapper-message\">\n          <span className=\"icon-check\" />\n          <div className=\"title-message\">You have no tasks</div>\n          <div className=\"subtitle-message\">Sit back and relax</div>\n        </div>\n      </div>\n    );\n  }\n\n  const tasksInOrder = [\n    ...tasks.filter(t => t.state === 'TASK_PINNED'),\n    ...tasks.filter(t => t.state !== 'TASK_PINNED'),\n  ];\n\n  return (\n    <div className=\"list-items\">\n      {tasksInOrder.map(task => (\n        <Task key={task.id} task={task} {...events} />\n      ))}\n    </div>\n  );\n}\n\nTaskList.propTypes = {\n  loading: PropTypes.bool,\n  tasks: PropTypes.arrayOf(Task.propTypes.task).isRequired,\n  onPinTask: PropTypes.func.isRequired,\n  onArchiveTask: PropTypes.func.isRequired,\n};\n\nTaskList.defaultProps = {\n  loading: false,\n};\n\nexport default TaskList;"]},"metadata":{},"sourceType":"module"}